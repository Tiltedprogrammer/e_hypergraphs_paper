@article{Ghica:hierarchical,
  author       = {Dan R. Ghica and
                  Koko Muroya and
                  Todd Waugh Ambridge},
  title        = {Local Reasoning for Robust Observational Equivalence},
  journal      = {CoRR},
  volume       = {abs/1907.01257},
  year         = {2019},
  url          = {http://arxiv.org/abs/1907.01257},
  eprinttype    = {arXiv},
  eprint       = {1907.01257},
  timestamp    = {Mon, 08 Jul 2019 14:12:33 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-1907-01257.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{Heijltjes:FMCII,
  author       = {Chris Barrett and
                  Willem Heijltjes and
                  Guy McCusker},
  title        = {The Functional Machine Calculus {II:} Semantics},
  booktitle    = {31st {EACSL} Annual Conference on Computer Science Logic, {CSL} 2023,
                  February 13-16, 2023, Warsaw, Poland},
  series       = {LIPIcs},
  volume       = {252},
  pages        = {10:1--10:18},
  year         = {2023},
  url          = {https://doi.org/10.4230/LIPIcs.CSL.2023.10},
  doi          = {10.4230/LIPICS.CSL.2023.10},
  timestamp    = {Tue, 21 Mar 2023 21:02:52 +0100},
  biburl       = {https://dblp.org/rec/conf/csl/BarrettHM23.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{plump:hierarchical-graphs,
  author       = {Frank Drewes and
                  Berthold Hoffmann and
                  Detlef Plump},
  title        = {Hierarchical Graph Transformation},
  journal      = {J. Comput. Syst. Sci.},
  volume       = {64},
  number       = {2},
  pages        = {249--283},
  year         = {2002},
  url          = {https://doi.org/10.1006/jcss.2001.1790},
  doi          = {10.1006/JCSS.2001.1790},
  timestamp    = {Tue, 16 Feb 2021 14:03:47 +0100},
  biburl       = {https://dblp.org/rec/journals/jcss/DrewesHP02.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@article{Gaducci:hierarchical-graphs,
  author       = {Roberto Bruni and
                  Fabio Gadducci and
                  Alberto Lluch{-}Lafuente},
  title        = {An Algebra of Hierarchical Graphs and its Application to Structural
                  Encoding},
  journal      = {Sci. Ann. Comput. Sci.},
  volume       = {20},
  pages        = {53--96},
  year         = {2010},
  url          = {http://www.info.uaic.ro/bin/Annals/Article?v=XX\&a=2},
  timestamp    = {Tue, 01 Sep 2020 14:09:05 +0200},
  biburl       = {https://dblp.org/rec/journals/cuza/BruniGL10.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@article{palacz:hierarchical-transform,
  author       = {Wojciech Palacz},
  title        = {Algebraic hierarchical graph transformation},
  journal      = {J. Comput. Syst. Sci.},
  volume       = {68},
  number       = {3},
  pages        = {497--520},
  year         = {2004},
  url          = {https://doi.org/10.1016/S0022-0000(03)00064-3},
  doi          = {10.1016/S0022-0000(03)00064-3},
  timestamp    = {Sat, 20 May 2017 00:25:54 +0200},
  biburl       = {https://dblp.org/rec/journals/jcss/Palacz04.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{montanari:gs-lambda,
  author       = {Matteo Coccia and
                  Fabio Gadducci and
                  Ugo Montanari},
  editor       = {Richard Blute and
                  Peter Selinger},
  title        = {GS.Lambda Theories: {A} Syntax for Higher-Order Graphs},
  booktitle    = {Category Theory and Computer Science, {CTCS} 2002, Ottawa, Canada,
                  August 15-17, 2002},
  series       = {Electronic Notes in Theoretical Computer Science},
  volume       = {69},
  pages        = {83--100},
  publisher    = {Elsevier},
  year         = {2002},
  url          = {https://doi.org/10.1016/S1571-0661(04)80560-7},
  doi          = {10.1016/S1571-0661(04)80560-7},
  timestamp    = {Fri, 12 Feb 2021 22:17:46 +0100},
  biburl       = {https://dblp.org/rec/journals/entcs/CocciaGM02.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{fox,
author = {Thomas Fox},
title = {Coalgebras and cartesian categories},
journal = {Communications in Algebra},
volume = {4},
number = {7},
pages = {665-667},
year = {1976},
publisher = {Taylor & Francis},
doi = {10.1080/00927877608822127},
URL = { 
        https://doi.org/10.1080/00927877608822127
},
eprint = { 
        https://doi.org/10.1080/00927877608822127
}
}



% article{Hasegawa-traced,
  author       = {Keiko Nakata and
                  Masahito Hasegawa},
  title        = {Small-step and big-step semantics for call-by-need},
  journal      = {CoRR},
  volume       = {abs/0907.4640},
  year         = {2009},
  url          = {http://arxiv.org/abs/0907.4640},
  eprinttype    = {arXiv},
  eprint       = {0907.4640},
  timestamp    = {Mon, 13 Aug 2018 16:48:16 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-0907-4640.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Hasegawa-traced, 
	title={Small-step and big-step semantics for call-by-need}, 
	volume={19}, 
	DOI={10.1017/S0956796809990219}, 
	number={6}, 
	journal={Journal of Functional Programming}, 
	author={NAKATA, KEIKO and HASEGAWA, MASAHITO}, 
	year={2009}, 
	pages={699–722}
}

@inbook{Selinger_2010,
   title={A Survey of Graphical Languages for Monoidal Categories},
   ISBN={9783642128219},
   ISSN={1616-6361},
   url={http://dx.doi.org/10.1007/978-3-642-12821-9_4},
   DOI={10.1007/978-3-642-12821-9_4},
   booktitle={Lecture Notes in Physics},
   publisher={Springer Berlin Heidelberg},
   author={Selinger, P.},
   year={2010},
   pages={289–355} }

@article{EggPaper,
author = {Willsey, Max and Nandi, Chandrakana and Wang, Yisu Remy and Flatt, Oliver and Tatlock, Zachary and Panchekha, Pavel},
title = {Egg: Fast and Extensible Equality Saturation},
year = {2021},
issue_date = {January 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {POPL},
url = {https://doi.org/10.1145/3434304},
doi = {10.1145/3434304},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {23},
numpages = {29},
keywords = {e-graphs, equality saturation}
}

@book{nelson1980techniques,
  title={Techniques for program verification},
  author={Nelson, Charles Gregory},
  year={1980},
  publisher={Stanford University}
}

@article{dpo,
author = {Löwe, Michael and Corradini, A. and Montanari, Ugo and Rossi, Francesca and Ehrig, H. and Heckel, Reiko and Owe, M.},
year = {1996},
month = {08},
pages = {},
title = {Algebraic Approaches to Graph Transformation, Part I: Basic Concepts and Double Pushout Approach},
volume = {1},
journal = {Handbook of Graph Grammars and Computing by Graph Transformation},
doi = {10.1142/9789812384720_0003}
}

@article{Frobenius,
author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobocinski, Pawel and Zanasi, Fabio},
title = {String Diagram Rewrite Theory I: Rewriting with Frobenius Structure},
year = {2022},
issue_date = {April 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {69},
number = {2},
issn = {0004-5411},
url = {https://doi.org/10.1145/3502719},
doi = {10.1145/3502719},
journal = {J. ACM},
month = {mar},
articleno = {14},
numpages = {58},
keywords = {category theory, double-pushout rewriting, Frobenius algebra, String diagram}
}

@article{Frobenius2,
 title={String diagram rewrite theory II: Rewriting with symmetric monoidal structure},
 volume={32},
 DOI={10.1017/S0960129522000317}, 
 number={4}, 
 journal={Mathematical Structures in Computer Science}, 
 publisher={Cambridge University Press}, 
 author={Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobocinski, Pawel and Zanasi, Fabio}, 
 year={2022}, 
 pages={511–541}
}


@inproceedings{fscd,
  author    = {Mario Alvarez{-}Picallo and
               Dan R. Ghica and
               David Sprunger and
               Fabio Zanasi},
  editor    = {Amy P. Felty},
  title     = {Rewriting for Monoidal Closed Categories},
  booktitle = {7th International Conference on Formal Structures for Computation
               and Deduction, {FSCD} 2022, August 2-5, 2022, Haifa, Israel},
  series    = {LIPIcs},
  volume    = {228},
  pages     = {29:1--29:20},
  publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
  year      = {2022},
  url       = {https://doi.org/10.4230/LIPIcs.FSCD.2022.29},
  doi       = {10.4230/LIPIcs.FSCD.2022.29},
  timestamp = {Wed, 07 Dec 2022 23:13:59 +0100},
  biburl    = {https://dblp.org/rec/conf/fscd/Alvarez-Picallo22.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{maclane,
  added-at = {2009-09-18T21:22:09.000+0200},
  address = {New York},
  author = {MacLane, Saunders},
  doi={https://doi.org/10.1007/978-1-4612-9839-7
},
  note = {Graduate Texts in Mathematics, Vol. 5},
  pages = {ix+262},
  publisher = {Springer-Verlag},
  title = {Categories for the Working Mathematician},
  year = 1971
}

@misc{singher2023colored,
      title={Colored E-Graph: Equality Reasoning with Conditions}, 
      author={Eytan Singher and Shachar Itzhaky},
      year={2023},
      eprint={2305.19203},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}

@misc{koehler2022sketchguided,
      title={Sketch-Guided Equality Saturation: Scaling Equality Saturation to Complex Optimizations of Functional Programs}, 
      author={Thomas Koehler and Phil Trinder and Michel Steuwer},
      year={2022},
      eprint={2111.13040},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}

@article{ZX,
  TITLE = {{Graph-theoretic Simplification of Quantum Circuits with the ZX-calculus}},
  AUTHOR = {Duncan, Ross and Kissinger, Aleks and Perdrix, Simon and van de Wetering, John},
  URL = {https://inria.hal.science/hal-02995364},
  JOURNAL = {{Quantum}},
  PUBLISHER = {{Verein}},
  VOLUME = {4},
  PAGES = {279},
  YEAR = {2020},
  MONTH = Jun,
  DOI = {10.22331/q-2020-06-04-279},
  HAL_ID = {hal-02995364},
  HAL_VERSION = {v1},
}


@incollection{baldan_categorical_2014,
	address = {Berlin, Heidelberg},
	title = {A {Categorical} {Semantics} of {Signal} {Flow} {Graphs}},
	volume = {8704},
	isbn = {978-3-662-44583-9 978-3-662-44584-6},
	url = {http://link.springer.com/10.1007/978-3-662-44584-6_30},
	urldate = {2023-01-27},
	booktitle = {{CONCUR} 2014 – {Concurrency} {Theory}},
	publisher = {Springer Berlin Heidelberg},
	author = {Bonchi, Filippo and Sobociński, Paweł and Zanasi, Fabio},
	editor = {Baldan, Paolo and Gorla, Daniele},
	year = {2014},
	doi = {10.1007/978-3-662-44584-6_30},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {435--450},
	file = {Submitted Version:/Users/chris/Zotero/storage/AQ9IQ7DS/Bonchi et al. - 2014 - A Categorical Semantics of Signal Flow Graphs.pdf:application/pdf},
}

@article{bonchi_tape_nodate,
	title = {Tape diagrams for rig categories with finite biproducts},
	abstract = {Rig categories with finite biproducts are categories with two monoidal products ⊕ and ⊗, with the former being a biproduct and the latter distributing over the other. In this report we present tape diagrams, a sound and complete diagrammatic language for rig categories with finite biproducts, which can be thought intuitively as string diagrams of string diagrams.},
	language = {en},
	author = {Bonchi, Filippo and Giorgio, Alessandro Di and Santamaria, Alessio},
	file = {Bonchi et al. - Tape diagrams for rig categories with finite bipro.pdf:/Users/chris/Zotero/storage/PAZJQQM9/Bonchi et al. - Tape diagrams for rig categories with finite bipro.pdf:application/pdf},
}

misc{alvarez-picallo_functorial_2021,
	title = {Functorial {String} {Diagrams} for {Reverse}-{Mode} {Automatic} {Differentiation}},
	url = {http://arxiv.org/abs/2107.13433},
	abstract = {We enhance the calculus of string diagrams for monoidal categories with hierarchical features in order to capture closed monoidal (and cartesian closed) structure. Using this new syntax we formulate an automatic differentiation algorithm for (applied) simply typed lambda calculus in the style of [Pearlmutter and Siskind 2008] and we prove for the first time its soundness. To give an efficient yet principled implementation of the AD algorithm we define a sound and complete representation of hierarchical string diagrams as a class of hierarchical hypergraphs we call hypernets.},
	urldate = {2023-01-30},
	publisher = {arXiv},
	author = {Alvarez-Picallo, Mario and Ghica, Dan R. and Sprunger, David and Zanasi, Fabio},
	month = jul,
	year = {2021},
	note = {arXiv:2107.13433 [cs]},
	keywords = {Computer Science - Programming Languages, Computer Science - Machine Learning, I.2.5},
	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/AYFFEDDY/Alvarez-Picallo et al. - 2021 - Functorial String Diagrams for Reverse-Mode Automa.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/I2GWYEYD/2107.html:text/html},
}

@inproceedings{alvarez-picallo-functorial_2021,
  author       = {Mario Alvarez{-}Picallo and
                  Dan R. Ghica and
                  David Sprunger and
                  Fabio Zanasi},
  editor       = {Bartek Klin and
                  Elaine Pimentel},
  title        = {Functorial String Diagrams for Reverse-Mode Automatic Differentiation},
  booktitle    = {31st {EACSL} Annual Conference on Computer Science Logic, {CSL} 2023,
                  February 13-16, 2023, Warsaw, Poland},
  series       = {LIPIcs},
  volume       = {252},
  pages        = {6:1--6:20},
  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
  year         = {2023},
  url          = {https://doi.org/10.4230/LIPIcs.CSL.2023.6},
  doi          = {10.4230/LIPICS.CSL.2023.6},
  timestamp    = {Sun, 12 Nov 2023 02:16:18 +0100},
  biburl       = {https://dblp.org/rec/conf/csl/Alvarez-Picallo23.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{alvarez-picallo_rewriting_2022,
	title = {Rewriting for {Monoidal} {Closed} {Categories}},
	abstract = {This paper develops a formal string diagram language for monoidal closed categories. Previous work has shown that string diagrams for freely generated symmetric monoidal categories can be viewed as hypergraphs with interfaces, and the axioms of these categories can be realized by rewriting systems. This work proposes hierarchical hypergraphs as a suitable formalization of string diagrams for monoidal closed categories. We then show double pushout rewriting captures the axioms of these closed categories.},
	language = {en},
	author = {Alvarez-Picallo, Mario and Ghica, Dan and Sprunger, David and Zanasi, Fabio},
	year = {2022},
	file = {Alvarez-Picallo et al. - 2022 - Rewriting for Monoidal Closed Categories.pdf:/Users/chris/Zotero/storage/UK7C7NQ3/Alvarez-Picallo et al. - 2022 - Rewriting for Monoidal Closed Categories.pdf:application/pdf},
}

@article{bonchi_string_2022,
	title = {String diagram rewrite theory {III}: {Confluence} with and without {Frobenius}},
	issn = {0960-1295, 1469-8072},
	shorttitle = {String diagram rewrite theory {III}},
	url = {https://www.cambridge.org/core/product/identifier/S0960129522000123/type/journal_article},
	doi = {10.1017/S0960129522000123},
	abstract = {In this paper, we address the problem of proving conﬂuence for string diagram rewriting, which was previously shown to be characterised combinatorially as double-pushout rewriting with interfaces (DPOI) on (labelled) hypergraphs. For standard DPO rewriting without interfaces, conﬂuence for terminating rewriting systems is, in general, undecidable. Nevertheless, we show here that conﬂuence for DPOI, and hence string diagram rewriting, is decidable. We apply this result to give effective procedures for deciding local conﬂuence of symmetric monoidal theories with and without Frobenius structure by critical pair analysis. For the latter, we introduce the new notion of path joinability for critical pairs, which enables ﬁnitely many joins of a critical pair to be lifted to an arbitrary context in spite of the strong non-local constraints placed on rewriting in a generic symmetric monoidal theory.},
	language = {en},
	urldate = {2023-01-30},
	journal = {Mathematical Structures in Computer Science},
	author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobociński, Paweł and Zanasi, Fabio},
	month = jun,
	year = {2022},
	pages = {1--41},
	file = {Bonchi et al. - 2022 - String diagram rewrite theory III Confluence with.pdf:/Users/chris/Zotero/storage/9CLNDVUI/Bonchi et al. - 2022 - String diagram rewrite theory III Confluence with.pdf:application/pdf},
}

%%misc{bonchi_string_2022-1,
	title = {String {Diagram} {Rewrite} {Theory} {I}: {Rewriting} with {Frobenius} {Structure}},
	shorttitle = {String {Diagram} {Rewrite} {Theory} {I}},
	url = {http://arxiv.org/abs/2012.01847},
	doi = {10.48550/arXiv.2012.01847},
	abstract = {String diagrams are a powerful and intuitive graphical syntax, originated in the study of symmetric monoidal categories. In the last few years, they have found application in the modelling of various computational structures, in fields as diverse as Computer Science, Physics, Control Theory, Linguistics, and Biology. In many such proposals, the transformations of the described systems are modelled as rewrite rules of diagrams. These developments demand a mathematical foundation for string diagram rewriting: whereas rewrite theory for terms is well-understood, the two-dimensional nature of string diagrams poses additional challenges. This work systematises and expands a series of recent conference papers laying down such foundation. As first step, we focus on the case of rewrite systems for string diagrammatic theories which feature a Frobenius algebra. This situation ubiquitously appear in various approaches: for instance, in the algebraic semantics of linear dynamical systems, Frobenius structures model the wiring of circuits; in categorical quantum mechanics, they model interacting quantum observables. Our work introduces a combinatorial interpretation of string diagram rewriting modulo Frobenius structures, in terms of double-pushout hypergraph rewriting. Furthermore, we prove this interpretation to be sound and complete. In the last part, we also see that the approach can be generalised to model rewriting modulo multiple Frobenius structures. As a proof of concept, we show how to derive from these results a termination strategy for Interacting Bialgebras, an important rewrite theory in the study of quantum circuits and signal flow graphs.},
	urldate = {2023-05-21},
	publisher = {arXiv},
	author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobocinski, Pawel and Zanasi, Fabio},
	month = feb,
	year = {2022},
	note = {arXiv:2012.01847 [cs, math]},
	keywords = {Computer Science - Logic in Computer Science, Mathematics - Category Theory},
	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/VNFBQ439/Bonchi et al. - 2022 - String Diagram Rewrite Theory I Rewriting with Fr.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/VUBPZRST/2012.html:text/html},
}

@article{bonchi_string_2022-1,
	author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobocinski, Pawel and Zanasi, Fabio},
	title = {String Diagram Rewrite Theory I: Rewriting with Frobenius Structure},
	year = {2022},
	issue_date = {April 2022},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {69},
	number = {2},
	issn = {0004-5411},
	url = {https://doi.org/10.1145/3502719},
	doi = {10.1145/3502719},
	journal = {J. ACM},
	month = {mar},
	articleno = {14},
	numpages = {58},
	keywords = {double-pushout rewriting, Frobenius algebra, String diagram, category theory}
}

@article{zhang_relational_2022,
	title = {Relational e-matching},
	volume = {6},
	issn = {2475-1421},
	url = {https://dl.acm.org/doi/10.1145/3498696},
	doi = {10.1145/3498696},
	abstract = {We present a new approach to e-matching based on relational join; in particular, we apply recent database query execution techniques to guarantee worst-case optimal run time. Compared to the conventional backtracking approach that always searches the e-graph "top down", our new relational e-matching approach can better exploit pattern structure by searching the e-graph according to an optimized query plan. We also establish the first data complexity result for e-matching, bounding run time as a function of the e-graph size and output size. We prototyped and evaluated our technique in the state-of-the-art egg e-graph framework. Compared to a conventional baseline, relational e-matching is simpler to implement and orders of magnitude faster in practice.},
	language = {en},
	number = {POPL},
	urldate = {2023-07-12},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Zhang, Yihong and Wang, Yisu Remy and Willsey, Max and Tatlock, Zachary},
	month = jan,
	year = {2022},
	pages = {1--22},
	file = {Full Text PDF:/Users/chris/Zotero/storage/JIS56QFS/Zhang et al. - 2022 - Relational e-matching.pdf:application/pdf},
}

% article{coecke_interacting_2011,
	title = {Interacting {Quantum} {Observables}: {Categorical} {Algebra} and {Diagrammatics}},
	volume = {13},
	issn = {1367-2630},
	shorttitle = {Interacting {Quantum} {Observables}},
	url = {http://arxiv.org/abs/0906.4725},
	doi = {10.1088/1367-2630/13/4/043016},
	abstract = {This paper has two tightly intertwined aims: (i) To introduce an intuitive and universal graphical calculus for multi-qubit systems, the ZX-calculus, which greatly simplifies derivations in the area of quantum computation and information. (ii) To axiomatise complementarity of quantum observables within a general framework for physical theories in terms of dagger symmetric monoidal categories. We also axiomatize phase shifts within this framework. Using the well-studied canonical correspondence between graphical calculi and symmetric monoidal categories, our results provide a purely graphical formalisation of complementarity for quantum observables. Each individual observable, represented by a commutative special dagger Frobenius algebra, gives rise to an abelian group of phase shifts, which we call the phase group. We also identify a strong form of complementarity, satisfied by the Z and X spin observables, which yields a scaled variant of a bialgebra.},
	number = {4},
	urldate = {2023-08-03},
	journal = {New Journal of Physics},
	author = {Coecke, Bob and Duncan, Ross},
	month = apr,
	year = {2011},
	note = {arXiv:0906.4725 [quant-ph]},
	keywords = {Computer Science - Logic in Computer Science, Mathematics - Category Theory, Quantum Physics, Mathematics - Quantum Algebra},
	pages = {043016},
	annote = {Comment: 81 pages, many figures. Significant changes from previous version. The first sections contain a gentle introduction for physicists to the graphical language, and its use in quantum computation},
	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/YV8IZRV9/Coecke and Duncan - 2011 - Interacting Quantum Observables Categorical Algeb.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/P34U6X9A/0906.html:text/html},
}


@article{coecke_interacting_2011,
	abstract = {This paper has two tightly intertwined aims: (i) to introduce an intuitive and universal graphical calculus for multi-qubit systems, the ZX-calculus, which greatly simplifies derivations in the area of quantum computation and information. (ii) To axiomatize complementarity of quantum observables within a general framework for physical theories in terms of dagger symmetric monoidal categories. We also axiomatize phase shifts within this framework. Using the well-studied canonical correspondence between graphical calculi and dagger symmetric monoidal categories, our results provide a purely graphical formalisation of complementarity for quantum observables. Each individual observable, represented by a commutative special dagger Frobenius algebra, gives rise to an Abelian group of phase shifts, which we call the phase group. We also identify a strong form of complementarity, satisfied by the Z- and X-spin observables, which yields a scaled variant of a bialgebra.},
	author = {Bob Coecke and Ross Duncan},
	doi = {10.1088/1367-2630/13/4/043016},
	journal = {New Journal of Physics},
	month = {apr},
	number = {4},
	pages = {043016},
	title = {Interacting quantum observables: categorical algebra and diagrammatics},
	url = {https://dx.doi.org/10.1088/1367-2630/13/4/043016},
	volume = {13},
	year = {2011},
	bdsk-url-1 = {https://dx.doi.org/10.1088/1367-2630/13/4/043016}}


% misc{duncan_generalised_2009,
	title = {Generalised {Proof}-{Nets} for {Compact} {Categories} with {Biproducts}},
	url = {http://arxiv.org/abs/0903.5154},
	doi = {10.48550/arXiv.0903.5154},
	abstract = {Just as conventional functional programs may be understood as proofs in an intuitionistic logic, so quantum processes can also be viewed as proofs in a suitable logic. We describe such a logic, the logic of compact closed categories and biproducts, presented both as a sequent calculus and as a system of proof-nets. This logic captures much of the necessary structure needed to represent quantum processes under classical control, while remaining agnostic to the fine details. We demonstrate how to represent quantum processes as proof-nets, and show that the dynamic behaviour of a quantum process is captured by the cut-elimination procedure for the logic. We show that the cut elimination procedure is strongly normalising: that is, that every legal way of simplifying a proof-net leads to the same, unique, normal form. Finally, taking some initial set of operations as non-logical axioms, we show that that the resulting category of proof-nets is a representation of the free compact closed category with biproducts generated by those operations.},
	urldate = {2023-08-03},
	publisher = {arXiv},
	author = {Duncan, Ross},
	month = mar,
	year = {2009},
	note = {arXiv:0903.5154 [cs, math]},
	keywords = {Computer Science - Logic in Computer Science, Mathematics - Category Theory},
	annote = {Comment: 77 pages, many figures. To appear in CUP volume, "Semantics of Quantum Computation"},
	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/TLVU87A5/Duncan - 2009 - Generalised Proof-Nets for Compact Categories with.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/ITP2PA6K/0903.html:text/html},
}

@inbook{duncan_generalised_2009,
  title = "Generalised Proof-Nets for Compact Categories with Biproducts",
  author = "Ross Duncan",
  year = "2009",
  booktitle = "Semantics of Quantum Computation",
  editor = "S. Gay and I. Mackie",
  keywords = "categorical quantum mechanics; compact closed categories; proof-nets; quantum computing",
  note = "Preprint available at http://arxiv.org/abs/0903.5154",
  publisher = "Cambridge University Press",
}

% article{coecke_lambek_2013,
	title = {Lambek vs. {Lambek}: {Functorial} {Vector} {Space} {Semantics} and {String} {Diagrams} for {Lambek} {Calculus}},
	volume = {164},
	issn = {01680072},
	shorttitle = {Lambek vs. {Lambek}},
	url = {http://arxiv.org/abs/1302.0393},
	doi = {10.1016/j.apal.2013.05.009},
	abstract = {The Distributional Compositional Categorical (DisCoCat) model is a mathematical framework that provides compositional semantics for meanings of natural language sentences. It consists of a computational procedure for constructing meanings of sentences, given their grammatical structure in terms of compositional type-logic, and given the empirically derived meanings of their words. For the particular case that the meaning of words is modelled within a distributional vector space model, its experimental predictions, derived from real large scale data, have outperformed other empirically validated methods that could build vectors for a full sentence. This success can be attributed to a conceptually motivated mathematical underpinning, by integrating qualitative compositional type-logic and quantitative modelling of meaning within a category-theoretic mathematical framework. The type-logic used in the DisCoCat model is Lambek's pregroup grammar. Pregroup types form a posetal compact closed category, which can be passed, in a functorial manner, on to the compact closed structure of vector spaces, linear maps and tensor product. The diagrammatic versions of the equational reasoning in compact closed categories can be interpreted as the flow of word meanings within sentences. Pregroups simplify Lambek's previous type-logic, the Lambek calculus, which has been extensively used to formalise and reason about various linguistic phenomena. The apparent reliance of the DisCoCat on pregroups has been seen as a shortcoming. This paper addresses this concern, by pointing out that one may as well realise a functorial passage from the original type-logic of Lambek, a monoidal bi-closed category, to vector spaces, or to any other model of meaning organised within a monoidal bi-closed category. The corresponding string diagram calculus, due to Baez and Stay, now depicts the flow of word meanings.},
	number = {11},
	urldate = {2023-08-03},
	journal = {Annals of Pure and Applied Logic},
	author = {Coecke, Bob and Grefenstette, Edward and Sadrzadeh, Mehrnoosh},
	month = nov,
	year = {2013},
	note = {arXiv:1302.0393 [cs, math]},
	keywords = {Mathematics - Category Theory, Computer Science - Computation and Language, F.4.1, F.4.2, Mathematics - Logic, 16B50, 18A10, 68T50, G.1.3, I.2.7},
	pages = {1079--1100},
	annote = {Comment: 29 pages, pending publication in Annals of Pure and Applied Logic},
	file = {arXiv.org Snapshot:/Users/chris/Zotero/storage/Y4FR4DCH/1302.html:text/html;Full Text PDF:/Users/chris/Zotero/storage/844BEMKC/Coecke et al. - 2013 - Lambek vs. Lambek Functorial Vector Space Semanti.pdf:application/pdf},
}

@article{coecke_lambek_2013,
  author       = {Bob Coecke and
                  Edward Grefenstette and
                  Mehrnoosh Sadrzadeh},
  title        = {Lambek vs. Lambek: Functorial vector space semantics and string diagrams
                  for Lambek calculus},
  journal      = {Ann. Pure Appl. Log.},
  volume       = {164},
  number       = {11},
  pages        = {1079--1100},
  year         = {2013},
  url          = {https://doi.org/10.1016/j.apal.2013.05.009},
  doi          = {10.1016/J.APAL.2013.05.009},
  timestamp    = {Thu, 23 Sep 2021 11:46:12 +0200},
  biburl       = {https://dblp.org/rec/journals/apal/CoeckeGS13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{wazni_quantum_2022,
	title = {A {Quantum} {Natural} {Language} {Processing} {Approach} to {Pronoun} {Resolution}},
	url = {http://arxiv.org/abs/2208.05393},
	abstract = {We use the Lambek Calculus with soft sub-exponential modalities to model and reason about discourse relations such as anaphora and ellipsis. A semantics for this logic is obtained by using truncated Fock spaces, developed in our previous work. We depict these semantic computations via a new string diagram. The Fock Space semantics has the advantage that its terms are learnable from large corpora of data using machine learning and they can be experimented with on mainstream natural language tasks. Further, and thanks to an existing translation from vector spaces to quantum circuits, we can also learn these terms on quantum computers and their simulators, such as the IBMQ range. We extend the existing translation to Fock spaces and develop quantum circuit semantics for discourse relations. We then experiment with the IBMQ AerSimulations of these circuits in a definite pronoun resolution task, where the highest accuracies were recorded for models when the anaphora was resolved.},
	urldate = {2023-08-03},
	publisher = {arXiv},
	author = {Wazni, Hadi and Lo, Kin Ian and McPheat, Lachlan and Sadrzadeh, Mehrnoosh},
	month = aug,
	year = {2022},
	note = {arXiv:2208.05393 [cs]},
	keywords = {Computer Science - Logic in Computer Science, Computer Science - Computation and Language},
	file = {arXiv.org Snapshot:/Users/chris/Zotero/storage/PU2F8WCM/2208.html:text/html;Full Text PDF:/Users/chris/Zotero/storage/E7RKP85F/Wazni et al. - 2022 - A Quantum Natural Language Processing Approach to .pdf:application/pdf},
}

%% misc{bonchi_string_2022-2,
% 	title = {String {Diagram} {Rewrite} {Theory} {II}: {Rewriting} with {Symmetric} {Monoidal} {Structure}},
% 	shorttitle = {String {Diagram} {Rewrite} {Theory} {II}},
% 	url = {http://arxiv.org/abs/2104.14686},
% 	doi = {10.48550/arXiv.2104.14686},
% 	abstract = {Symmetric monoidal theories (SMTs) generalise algebraic theories in a way that make them suitable to express resource-sensitive systems, in which variables cannot be copied or discarded at will. In SMTs, traditional tree-like terms are replaced by string diagrams, topological entities that can be intuitively thoughts as diagrams of wires and boxes. Recently, string diagrams have become increasingly popular as a graphical syntax to reason about computational models across diverse fields, including programming language semantics, circuit theory, quantum mechanics, linguistics, and control theory. In applications, it is often convenient to implement the equations appearing in SMTs as rewriting rules. This poses the challenge of extending the traditional theory of term rewriting, which has been developed for algebraic theories, to string diagrams. In this paper, we develop a mathematical theory of string diagram rewriting for SMTs. Our approach exploits the correspondence between string diagram rewriting and double pushout (DPO) rewriting of certain graphs, introduced in the first paper of this series. Such a correspondence is only sound when the SMT includes a Frobenius algebra structure. In the present work, we show how an analogous correspondence may be established for arbitrary SMTs, once an appropriate notion of DPO rewriting (which we call convex) is identified. As proof of concept, we use our approach to show termination of two SMTs of interest: Frobenius semi-algebras and bialgebras.},
% 	urldate = {2023-08-03},
% 	publisher = {arXiv},
% 	author = {Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobocinski, Pawel and Zanasi, Fabio},
% 	month = sep,
% 	year = {2022},
% 	note = {arXiv:2104.14686 [cs, math]},
% 	keywords = {Computer Science - Logic in Computer Science, Mathematics - Category Theory, Mathematics - Logic},
% 	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/NVPXV9U5/Bonchi et al. - 2022 - String Diagram Rewrite Theory II Rewriting with S.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/MU338TKH/2104.html:text/html},
% }

@article{bonchi_string_2022-2,
 title={String diagram rewrite theory II: Rewriting with symmetric monoidal structure}, 
 volume={32}, 
 DOI={10.1017/S0960129522000317}, 
 number={4}, 
 journal={Mathematical Structures in Computer Science}, 
 author={Bonchi, Filippo and Gadducci, Fabio and Kissinger, Aleks and Sobocinski, Pawel and Zanasi, Fabio}, 
 year={2022}, 
 pages={511–541}
 }

@inproceedings{ghica_rewriting_2023,
	address = {Dagstuhl, Germany},
	series = {Leibniz {International} {Proceedings} in {Informatics} ({LIPIcs})},
	title = {Rewriting {Modulo} {Traced} {Comonoid} {Structure}},
	volume = {260},
	isbn = {978-3-95977-277-8},
	url = {https://drops.dagstuhl.de/opus/volltexte/2023/17998},
	doi = {10.4230/LIPIcs.FSCD.2023.14},
	urldate = {2023-08-03},
	booktitle = {8th {International} {Conference} on {Formal} {Structures} for {Computation} and {Deduction} ({FSCD} 2023)},
	publisher = {Schloss Dagstuhl – Leibniz-Zentrum für Informatik},
	author = {Ghica, Dan R. and Kaye, George},
	editor = {Gaboardi, Marco and van Raamsdonk, Femke},
	year = {2023},
	note = {ISSN: 1868-8969},
	keywords = {comonoid structure, double pushout rewriting, graph rewriting, string diagrams, symmetric traced monoidal categories},
	pages = {14:1--14:21},
	file = {Full Text PDF:/Users/chris/Zotero/storage/MP4LWVM8/Ghica and Kaye - 2023 - Rewriting Modulo Traced Comonoid Structure.pdf:application/pdf},
}

@article{wilson_string_2023,
	title = {String {Diagrams} for {Non}-{Strict} {Monoidal} {Categories}},
	abstract = {Whereas string diagrams for strict monoidal categories are well understood, and have found application in several fields of Computer Science, graphical formalisms for non-strict monoidal categories are far less studied. In this paper, we provide a presentation by generators and relations of string diagrams for non-strict monoidal categories, and show how this construction can handle applications in domains such as digital circuits and programming languages. We prove the correctness of our construction, which yields a novel proof of Mac Lane’s strictness theorem. This in turn leads to an elementary graphical proof of Mac Lane’s coherence theorem, and in particular allows for the inductive construction of the canonical isomorphisms in a monoidal category.},
	language = {en},
	author = {Wilson, Paul and Ghica, Dan and Zanasi, Fabio},
	year = {2023},
	file = {Wilson et al. - 2023 - String Diagrams for Non-Strict Monoidal Categories.pdf:/Users/chris/Zotero/storage/Y4HXUALR/Wilson et al. - 2023 - String Diagrams for Non-Strict Monoidal Categories.pdf:application/pdf},
}

@article{ghica_rewriting_2023-1,
	title = {Rewriting {Modulo} {Traced} {Comonoid} {Structure}},
	abstract = {In this paper we adapt previous work on rewriting string diagrams using hypergraphs to the case where the underlying category has a traced comonoid structure, in which wires can be forked and the outputs of a morphism can be connected to its input. Such a structure is particularly interesting because any traced Cartesian (dataflow) category has an underlying traced comonoid structure. We show that certain subclasses of hypergraphs are fully complete for traced comonoid categories: that is to say, every term in such a category has a unique corresponding hypergraph up to isomorphism, and from every hypergraph with the desired properties, a unique term in the category can be retrieved up to the axioms of traced comonoid categories. We also show how the framework of double pushout rewriting (DPO) can be adapted for traced comonoid categories by characterising the valid pushout complements for rewriting in our setting. We conclude by presenting a case study in the form of recent work on an equational theory for sequential circuits: circuits built from primitive logic gates with delay and feedback. The graph rewriting framework allows for the definition of an operational semantics for sequential circuits.},
	language = {en},
	author = {Ghica, Dan R and Kaye, George},
	year = {2023},
	file = {Ghica and Kaye - 2023 - Rewriting Modulo Traced Comonoid Structure.pdf:/Users/chris/Zotero/storage/7UEUPZF7/Ghica and Kaye - 2023 - Rewriting Modulo Traced Comonoid Structure.pdf:application/pdf},
}

@misc{ghica_hierarchical_2023,
	title = {Hierarchical string diagrams and applications},
	url = {http://arxiv.org/abs/2305.18945},
	doi = {10.48550/arXiv.2305.18945},
	abstract = {This is a tutorial text giving an advanced introduction to the diagrammatic syntax of monoidal (and Cartesian) closed categories in the style of "functorial boxes". This syntax can be efficiently represented as a data structure which we call hierarchical hypergraphs, the systematic rewriting of which represents a way of deriving abstract machines for higher-order programming languages directly from their operational semantics. To arrive at this main intended application we pay attention in particular to the diagrammatic language of adjunctions and explicit strictifications. Finally, we present new proof techniques made possible by a quasi-canonical presentation of terms in monoidal closed categories called foliations which are useful in the case of complicated program transformations such as automatic differentiation and closure conversion.},
	urldate = {2023-08-03},
	publisher = {arXiv},
	author = {Ghica, Dan and Zanasi, Fabio},
	month = may,
	year = {2023},
	note = {arXiv:2305.18945 [cs, math]},
	keywords = {Computer Science - Logic in Computer Science, Computer Science - Programming Languages, Mathematics - Category Theory},
	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/YLKDZ4SW/Ghica and Zanasi - 2023 - Hierarchical string diagrams and applications.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/77ICS4TD/2305.html:text/html},
}

@misc{ghica_compositional_2023,
	title = {A compositional theory of digital circuits},
	url = {http://arxiv.org/abs/2201.10456},
	doi = {10.48550/arXiv.2201.10456},
	abstract = {A syntax is compositional if complex components can be constructed out of simpler ones on the basis of their interfaces, without inspecting their internals. Digital circuits, despite having been studied for nearly a century and used at scale for about half that time, have until recently evaded a fully compositional theoretical understanding. The sticking point has been the need to avoid feedback loops that bypass memory elements, the so called `combinational feedback' problem. This requires examining the internal structure of a circuit, defeating compositionality. Recent work remedied this theoretical shortcoming by showing how digital circuits can be presented compositionally as morphisms in a freely generated Cartesian traced (dataflow) category. The focus was to support a better syntactical understanding of digital circuits, culminating in the formulation of novel operational semantics for digital circuits using an equational theory. The goals of this paper are twofold. First we formalise the semantics of digital circuits by interpreting them as functions on streams with certain properties. Second we refine the previous equational theory so that it is in perfect agreement with the semantic model. To support this result we introduce two key equations: the first can eliminate non-delay-guarded feedback via finite unfoldings, and the second can translate between circuits with the same behaviour syntactically by reducing the problem to checking a finite number of closed circuits. While these are enough to establish a correspondence between the denotational and the equational frameworks, we also show how simpler equations can be derived for more intuitive reasoning. The most important consequence of this is that we can now give a recipe that ensures a circuit always produces observable output, thus using the denotational model to inform and improve the operational semantics.},
	urldate = {2023-08-03},
	publisher = {arXiv},
	author = {Ghica, Dan R. and Kaye, George and Sprunger, David},
	month = feb,
	year = {2023},
	note = {arXiv:2201.10456 [cs, math]},
	keywords = {Computer Science - Logic in Computer Science, Computer Science - Programming Languages, Mathematics - Category Theory},
	annote = {Comment: Improved content and presentation, 32 pages},
	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/UPB4BWEY/Ghica et al. - 2023 - A compositional theory of digital circuits.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/B6GMBKBV/2201.html:text/html},
}

% article{ghica_operational_2021,
	title = {Operational {Semantics} with {Hierarchical} {Abstract} {Syntax} {Graphs}},
	volume = {334},
	issn = {2075-2180},
	url = {http://arxiv.org/abs/2102.02363},
	doi = {10.4204/EPTCS.334.1},
	abstract = {This is a motivating tutorial introduction to a semantic analysis of programming languages using a graphical language as the representation of terms, and graph rewriting as a representation of reduction rules. We show how the graphical language automatically incorporates desirable features, such as alpha-equivalence and how it can describe pure computation, imperative store, and control features in a uniform framework. The graph semantics combines some of the best features of structural operational semantics and abstract machines, while offering powerful new methods for reasoning about contextual equivalence. All technical details are available in an extended technical report by Muroya and the author and in Muroya's doctoral dissertation.},
	urldate = {2023-08-03},
	journal = {Electronic Proceedings in Theoretical Computer Science},
	author = {Ghica, Dan R.},
	month = feb,
	year = {2021},
	note = {arXiv:2102.02363 [cs]},
	keywords = {Computer Science - Programming Languages},
	pages = {1--10},
	annote = {Comment: In Proceedings TERMGRAPH 2020, arXiv:2102.01804},
	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/2W9XSE4N/Ghica - 2021 - Operational Semantics with Hierarchical Abstract S.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/G4I7BUVE/2102.html:text/html},
}

@inproceedings{ghica_operational_2021,
  author       = {Dan R. Ghica},
  editor       = {Patrick Bahr},
  title        = {Operational Semantics with Hierarchical Abstract Syntax Graphs},
  booktitle    = {Proceedings 11th International Workshop on Computing with Terms and
                  Graphs, TERMGRAPH@FSCD 2020, Online, 5th July 2020},
  series       = {{EPTCS}},
  volume       = {334},
  pages        = {1--10},
  year         = {2020},
  url          = {https://doi.org/10.4204/EPTCS.334.1},
  doi          = {10.4204/EPTCS.334.1},
  timestamp    = {Fri, 05 Mar 2021 14:49:30 +0100},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2102-02363.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{flatt_small_2022,
	title = {Small {Proofs} from {Congruence} {Closure}},
	copyright = {http://creativecommons.org/licenses/by/4.0/},
	isbn = {978-3-85448-053-2},
	url = {https://repositum.tuwien.at/handle/20.500.12708/81325},
	doi = {10.34727/2022/isbn.978-3-85448-053-2_13},
	abstract = {3},
	language = {en},
	urldate = {2023-08-03},
	author = {Flatt, Oliver and Coward, Samuel and Willsey, Max and Tatlock, Zachary and Panchekha, Pavel},
	month = oct,
	year = {2022},
	note = {Accepted: 2022-10-12T10:02:40Z},
	pages = {75--83},
	file = {Full Text PDF:/Users/chris/Zotero/storage/6SIYW57T/Flatt et al. - 2022 - Small Proofs from Congruence Closure.pdf:application/pdf},
}

@article{griggio_proceedings_2022,
	title = {Proceedings of the 22nd {Conference} on {Formal} {Methods} in {Computer}-{Aided} {Design} – {FMCAD} 2022},
	copyright = {Creative Commons Attribution 4.0 International},
	url = {https://repositum.tuwien.at/handle/20.500.12708/81308},
	doi = {10.34727/2022/ISBN.978-3-85448-053-2},
	abstract = {Satisfiability Modulo Theory (SMT) solvers and equality saturation engines must generate proof certificates from e-graph-based congruence closure procedures to enable verification and conflict clause generation. Smaller proof certificates speed up these activities. Though the problem of generating proofs of minimal size is known to be NP-complete, existing proof minimization algorithms for congruence closure generate unnecessarily large proofs and introduce asymptotic overhead over the core congruence closure procedure. In this paper, we introduce an O(n5) time algorithm which generates optimal proofs under a new relaxed “proof tree size” metric that directly bounds proof size. We then relax this approach further to a practical O(n log(n)) greedy algorithm which generates small proofs with no asymptotic overhead. We implemented our techniques in the egg equality saturation toolkit, yielding the first certifying equality saturation engine. We show that our greedy approach in egg quickly generates substantially smaller proofs than the state-of-the-art Z3 SMT solver on a corpus of 3 760 benchmarks.},
	language = {en},
	urldate = {2023-08-03},
	author = {Griggio, Alberto and Rungta, Neha},
	collaborator = {{TU Wien} and {TU Wien} and Griggio, Alberto and Rungta, Neha},
	month = oct,
	year = {2022},
	note = {Publisher: TU Wien},
	keywords = {automated and formal reasoning, automatisches Schlussfolgern, computer-aided system design, formal methods, Formal Verification, formale Logik, formale Methode, formale Verifikation, hardware and system verification, Hardwareverifikation, rechnerunterstützte Systementwicklung, specification, Spezifikation, Synthese und Testung, synthesis and testing, Systemverifikation},
	annote = {Other
The Conference on Formal Methods in Computer-Aided Design (FMCAD) is an annual conference on the theory and applications of formal methods in hardware and system verification. FMCAD provides a leading forum to researchers in academia and industry for presenting and discussing groundbreaking methods, technologies, theoretical results, and tools for reasoning formally about computing systems. FMCAD covers formal aspects of computer-aided system design including verification, specification, synthesis, and testing.},
	file = {Griggio and Rungta - 2022 - Proceedings of the 22nd Conference on Formal Metho.pdf:/Users/chris/Zotero/storage/7LRGHCLA/Griggio and Rungta - 2022 - Proceedings of the 22nd Conference on Formal Metho.pdf:application/pdf},
}

@misc{noauthor_09083347_nodate,
	title = {[0908.3347] {A} survey of graphical languages for monoidal categories},
	url = {https://arxiv.org/abs/0908.3347},
	urldate = {2023-08-03},
}

@misc{barrett_functional_2023,
	title = {The {Functional} {Machine} {Calculus} {II}: {Semantics}},
	shorttitle = {The {Functional} {Machine} {Calculus} {II}},
	url = {http://arxiv.org/abs/2211.13140},
	doi = {10.48550/arXiv.2211.13140},
	abstract = {The Functional Machine Calculus (FMC), recently introduced by the authors, is a generalization of the lambda-calculus which may faithfully encode the effects of higher-order mutable store, I/O and probabilistic/non-deterministic input. Significantly, it remains confluent and can be simply typed in the presence of these effects. In this paper, we explore the denotational semantics of the FMC. We have three main contributions: first, we argue that its syntax -- in which both effects and lambda-calculus are realised using the same syntactic constructs -- is semantically natural, corresponding closely to the structure of a Scott-style domain theoretic semantics. Second, we show that simple types confer strong normalization by extending Gandy's proof for the lambda-calculus, including a small simplification of the technique. Finally, we show that the typed FMC (without considering the specifics of encoded effects), modulo an appropriate equational theory, is a complete language for Cartesian closed categories.},
	urldate = {2023-08-03},
	publisher = {arXiv},
	author = {Barrett, Chris and Heijltjes, Willem and McCusker, Guy},
	month = feb,
	year = {2023},
	note = {arXiv:2211.13140 [cs]},
	keywords = {Computer Science - Logic in Computer Science, Computer Science - Programming Languages, F.3.2, F.1.1},
	annote = {Comment: 40 pages, published in Computer Science Logic 2023 Updated to conform to published version},
	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/6GTGFYKS/Barrett et al. - 2023 - The Functional Machine Calculus II Semantics.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/VTEL8J54/2211.html:text/html},
}

@article{heijltjes_functional_2023,
	title = {The {Functional} {Machine} {Calculus}},
	volume = {Volume 1 - Proceedings of...},
	issn = {2969-2431},
	url = {http://arxiv.org/abs/2212.08177},
	doi = {10.46298/entics.10513},
	abstract = {This paper presents the Functional Machine Calculus (FMC) as a simple model of higher-order computation with "reader/writer" effects: higher-order mutable store, input/output, and probabilistic and non-deterministic computation. The FMC derives from the lambda-calculus by taking the standard operational perspective of a call-by-name stack machine as primary, and introducing two natural generalizations. One, "locations", introduces multiple stacks, which each may represent an effect and so enable effect operators to be encoded into the abstraction and application constructs of the calculus. The second, "sequencing", is known from kappa-calculus and concatenative programming languages, and introduces the imperative notions of "skip" and "sequence". This enables the encoding of reduction strategies, including call-by-value lambda-calculus and monadic constructs. The encoding of effects into generalized abstraction and application means that standard results from the lambda-calculus may carry over to effects. The main result is confluence, which is possible because encoded effects reduce algebraically rather than operationally. Reduction generates the familiar algebraic laws for state, and unlike in the monadic setting, reader/writer effects combine seamlessly. A system of simple types confers termination of the machine.},
	urldate = {2023-08-03},
	journal = {Electronic Notes in Theoretical Informatics and Computer Science},
	author = {Heijltjes, Willem},
	month = feb,
	year = {2023},
	note = {arXiv:2212.08177 [cs]},
	keywords = {Computer Science - Programming Languages},
	pages = {10513},
	annote = {Comment: 24 pages. To appear in Electronic Notes in Theoretical Informatics and Computer Science (ENTICS)},
	file = {arXiv Fulltext PDF:/Users/chris/Zotero/storage/V9IAZ286/Heijltjes - 2023 - The Functional Machine Calculus.pdf:application/pdf;arXiv.org Snapshot:/Users/chris/Zotero/storage/JJR5XTLA/2212.html:text/html},
}

@misc{noauthor_categories_nodate,
	title = {Categories for the {Working} {Mathematician} {\textbar} {SpringerLink}},
	url = {https://link.springer.com/book/10.1007/978-1-4757-4721-8},
	urldate = {2023-08-03},
}

@inproceedings{mellies_functorial_2006,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Functorial {Boxes} in {String} {Diagrams}},
	isbn = {978-3-540-45459-5},
	doi = {10.1007/11874683_1},
	abstract = {String diagrams were introduced by Roger Penrose as a handy notation to manipulate morphisms in a monoidal category. In principle, this graphical notation should encompass the various pictorial systems introduced in proof-theory (like Jean-Yves Girard’s proof-nets) and in concurrency theory (like Robin Milner’s bigraphs). This is not the case however, at least because string diagrams do not accomodate boxes — a key ingredient in these pictorial systems. In this short tutorial, based on our accidental rediscovery of an idea by Robin Cockett and Robert Seely, we explain how string diagrams may be extended with a notion of functorial box depicting a functor transporting an inside world (its source category) to an outside world (its target category). We expose two elementary applications of the notation: first, we characterize graphically when a faithful balanced monoidal functor F:ℂ \${\textbackslash}longrightarrow\$\${\textbackslash}mathbb\{D\}\$transports a trace operator from the category \${\textbackslash}mathbb\{D\}\$to the category ℂ, and exploit this to construct well-behaved fixpoint operators in cartesian closed categories generated by models of linear logic; second, we explain how the categorical semantics of linear logic induces that the exponential box of proof-nets decomposes as two enshrined boxes.},
	language = {en},
	booktitle = {Computer {Science} {Logic}},
	publisher = {Springer},
	author = {Melliès, Paul-André},
	editor = {Ésik, Zoltán},
	year = {2006},
	keywords = {Linear Logic, Monoidal Category, Categorical Semantic, Graphical Notation, Intuitionistic Logic},
	pages = {1--30},
	file = {Submitted Version:/Users/chris/Zotero/storage/HS5GDGUL/Melliès - 2006 - Functorial Boxes in String Diagrams.pdf:application/pdf},
}

@article{joyal_geometry_1991,
	title = {The geometry of tensor calculus, {I}},
	volume = {88},
	issn = {0001-8708},
	url = {https://www.sciencedirect.com/science/article/pii/000187089190003P},
	doi = {10.1016/0001-8708(91)90003-P},
	language = {en},
	number = {1},
	urldate = {2023-08-03},
	journal = {Advances in Mathematics},
	author = {Joyal, André and Street, Ross},
	month = jul,
	year = {1991},
	pages = {55--112},
}

@inproceedings{10.1145/1480881.1480915, author = {Tate, Ross and Stepp, Michael and Tatlock, Zachary and Lerner, Sorin}, title = {Equality Saturation: A New Approach to Optimization}, year = {2009}, isbn = {9781605583792}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/1480881.1480915}, doi = {10.1145/1480881.1480915}, abstract = {Optimizations in a traditional compiler are applied sequentially, with each optimization destructively modifying the program to produce a transformed program that is then passed to the next optimization. We present a new approach for structuring the optimization phase of a compiler. In our approach, optimizations take the form of equality analyses that add equality information to a common intermediate representation. The optimizer works by repeatedly applying these analyses to infer equivalences between program fragments, thus saturating the intermediate representation with equalities. Once saturated, the intermediate representation encodes multiple optimized versions of the input program. At this point, a profitability heuristic picks the final optimized program from the various programs represented in the saturated representation. Our proposed way of structuring optimizers has a variety of benefits over previous approaches: our approach obviates the need to worry about optimization ordering, enables the use of a global optimization heuristic that selects among fully optimized programs, and can be used to perform translation validation, even on compilers other than our own. We present our approach, formalize it, and describe our choice of intermediate representation. We also present experimental results showing that our approach is practical in terms of time and space overhead, is effective at discovering intricate optimization opportunities, and is effective at performing translation validation for a realistic optimizer.}, booktitle = {Proceedings of the 36th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages}, pages = {264–276}, numpages = {13}, keywords = {intermediate representation, equality reasoning, compiler optimization}, location = {Savannah, GA, USA}, series = {POPL '09} }
 
 
@article{10.1145/1594834.1480915, author = {Tate, Ross and Stepp, Michael and Tatlock, Zachary and Lerner, Sorin}, title = {Equality Saturation: A New Approach to Optimization}, year = {2009}, issue_date = {January 2009}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {44}, number = {1}, issn = {0362-1340}, url = {https://doi.org/10.1145/1594834.1480915}, doi = {10.1145/1594834.1480915}, abstract = {Optimizations in a traditional compiler are applied sequentially, with each optimization destructively modifying the program to produce a transformed program that is then passed to the next optimization. We present a new approach for structuring the optimization phase of a compiler. In our approach, optimizations take the form of equality analyses that add equality information to a common intermediate representation. The optimizer works by repeatedly applying these analyses to infer equivalences between program fragments, thus saturating the intermediate representation with equalities. Once saturated, the intermediate representation encodes multiple optimized versions of the input program. At this point, a profitability heuristic picks the final optimized program from the various programs represented in the saturated representation. Our proposed way of structuring optimizers has a variety of benefits over previous approaches: our approach obviates the need to worry about optimization ordering, enables the use of a global optimization heuristic that selects among fully optimized programs, and can be used to perform translation validation, even on compilers other than our own. We present our approach, formalize it, and describe our choice of intermediate representation. We also present experimental results showing that our approach is practical in terms of time and space overhead, is effective at discovering intricate optimization opportunities, and is effective at performing translation validation for a realistic optimizer.}, journal = {SIGPLAN Not.}, month = {jan}, pages = {264–276}, numpages = {13}, keywords = {intermediate representation, equality reasoning, compiler optimization} }

@InProceedings{orders_and_events,
author="Faggian, Claudia
and Piccolo, Mauro",
editor="Curien, Pierre-Louis",
title="Partial Orders, Event Structures and Linear Strategies",
booktitle="Typed Lambda Calculi and Applications",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="95--111",
abstract="We introduce a Game Semantics where strategies are partial orders, and composition is a generalization of the merging of orders. Building on this, to bridge between Game Semantics and Concurrency, we explore the relation between Event Structures and Linear Strategies. The former are a true concurrency model introduced by Nielsen, Plotkin, Winskel, the latter a family of linear innocent strategies developed starting from Girard's work in the setting of Ludics.",
isbn="978-3-642-02273-9"
}

@article{ConfusionFreeEvents,
title = {A Graph Abstract Machine Describing Event Structure Composition},
journal = {Electronic Notes in Theoretical Computer Science},
volume = {175},
number = {4},
pages = {21-36},
year = {2007},
note = {Proceedings of the Workshop on Graph Transformation for Concurrency and Verification (GT-VC 2006)},
issn = {1571-0661},
doi = {https://doi.org/10.1016/j.entcs.2007.04.014},
url = {https://www.sciencedirect.com/science/article/pii/S1571066107004112},
author = {Claudia Faggian and Mauro Piccolo},
keywords = {Event structures, directed acyclic graph, game semantics, linear logic, proof nets},
abstract = {Event structures, Game Semantics strategies and Linear Logic proof-nets arise in different domains (concurrency, semantics, proof-theory) but can all be described by means of directed acyclic graphs (dag's). They are all equipped with a specific notion of composition, interaction or normalization. We report on-going work, aiming to investigate the common dynamics which seems to underly these different structures. In this paper we focus on confusion free event structures on one side, and linear strategies [Jean-Yves Girard. Locus solum. Mathematical Structures in Computer Science, 11:301–506, 2001, C. Faggian and F. Maurel. Ludics nets, a game model of concurrent interaction. In Proc. of LICS'05 (Logic in Computer Science). IEEE Computer Society Press, 2005] on the other side. We introduce an abstract machine which is based on (and generalizes) strategies interaction; it processes labelled dag's, and provides a common presentation of the composition at work in these different settings.}
}

@misc{MonoidalCoproduct,
      title={Seven Sketches in Compositionality: An Invitation to Applied Category Theory}, 
      author={Brendan Fong and David I Spivak},
      year={2018},
      eprint={1803.05316},
      archivePrefix={arXiv},
      primaryClass={math.CT}
}

@inproceedings{ghica_jung_2017,
  author       = {Dan R. Ghica and
                  Achim Jung and
                  Aliaume Lopez},
  editor       = {Valentin Goranko and
                  Mads Dam},
  title        = {Diagrammatic Semantics for Digital Circuits},
  booktitle    = {26th {EACSL} Annual Conference on Computer Science Logic, {CSL} 2017,
                  August 20-24, 2017, Stockholm, Sweden},
  series       = {LIPIcs},
  volume       = {82},
  pages        = {24:1--24:16},
  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
  year         = {2017},
  url          = {https://doi.org/10.4230/LIPIcs.CSL.2017.24},
  doi          = {10.4230/LIPICS.CSL.2017.24},
  timestamp    = {Tue, 21 Mar 2023 21:02:52 +0100},
  biburl       = {https://dblp.org/rec/conf/csl/GhicaJL17.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{ghica_structural_nominal,
   title={A Structural and Nominal Syntax for Diagrams},
   volume={266},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.266.4},
   DOI={10.4204/eptcs.266.4},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Ghica, Dan R and Lopez, Aliaume},
   year={2018},
   month=feb, pages={71–83} }
